"use client"

import { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent } from "@/components/ui/card"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"

export default function WeddingSpeechWriter() {
  const [step, setStep] = useState(0)
  const [formData, setFormData] = useState<{ [key: string]: string; /* existing fields */ }>({
    name: '',
    relationship: '',
    bride: '',
    groom: '',
    meetingStory: '',
    qualities: '',
    funnyStory: '',
    seriousStory: '',
    wishes: '',
    quote: '',
    firstImpression: '',
    sharedMemory: '',
    coupleStrengths: '',
    personalGrowth: '',
    adviceForCouple: '',
    futureVision: '',
    messageToPartner: '',
    gratitude: '',
    toastIdea: '',
    additionalThoughts: '',
    firstName: 'John', // Default value added here
    email: 'john@example.com', // Default value added here
    speechType: 'Best man',
    speechTone: 'Casual & funny',
    requestor: 'Matt',
    requestorType: 'Groom',
    requestorRelationshipToYou: 'Friend',
    requestorPronouns: 'He/Him',
    timeKnown: '10 years',
    threeWordsForRequestor: 'Kind, funny, caring',

  })

  const updateFormData = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const nextStep = () => setStep(prev => prev + 1)
  const prevStep = () => setStep(prev => prev - 1)

  const questions = [
    { title: "Welcome to the Wedding Speech Creator", subtitle: "Let's personalize your speech!", field: null },
    { title: "What's your first name?", field: 'firstName', type: 'input', placeholder: 'First Name'},
    { title: "What's the email address for sending over your speech?", field: 'email', type: 'input', placeholder: 'Email Address' },
    { title: `Type of speech you want to generate`, field: 'speechType', type: 'radio', options: ['Best man', 'Father of the bride', 'Bridesmaid', 'Father of the groom', 'Wedding guest', 'Maid of honor', 'Groomsmen', 'Mother of the bride', 'Mother of the groom'] },
    { title: `Select the tone for your speech`, field: 'speechTone', type: 'radio', options: ['Casual & funny', 'Heartfelt & touching', 'Encouraging & supportive', 'Formal & elevated'] },
    { title: `Who is asking you to give the speech?`, subtitle: 'Enter the name of the Bride or Groom', field: 'requestor', type: 'input'}, //
    { title: `${formData.requestor || 'Jenny'} is a...`, field: 'requestorType', type: 'radio', options: ['Bride', 'Groom'] },
    { title: `${formData.requestor || 'Jenny'} is your...`, field: 'requestorRelationshipToYou', type: 'radio', options: ['Mother', 'Friend', 'Sister', 'Grandmother', 'Son', 'Aunt', 'Father', 'Brother', 'Grandfather', 'Cousin', 'Daughter', 'Uncle'] },
    { title: `What are ${formData.requestor || 'Jenny'}'s pronouns?`, field: 'requestorRronouns', type: 'radio', options: ['He/Him', 'She/Her', 'They/Them'] },
    { title: `How long have you known ${formData.requestor || 'Jenny'}?`, field: 'timeKnown', type: 'input' },
    { title: `What are three words that describe ${formData.requestor || 'Jenny'}?`, field: 'threeWordsForRequestor', type: 'input' },
    { title: `Who is ${formData.requestor || 'Jenny'} marrying?`, field: 'spouseName', type: 'input'},
    { title: `${formData.marryingWho || 'Jenny'} is a...`, field: 'spouseType', type: 'radio', options: ['Bride', 'Groom'] },
    { title: `What are ${formData.marryingWho || 'Jenny'}'s pronouns?`, field: 'spousePronouns', type: 'radio', options: ['He/Him', 'She/Her', 'They/Them'] },
    { title: `What are three words that describe ${formData.marryingWho || 'Jenny'}?`, field: 'spouseThreeWordsWho', type: 'input' },
    { title: `How and when did you first meet ${formData.marryingWho || 'Jenny'}? Tell us a story about your relationship early on or when you first met`, field: 'firstMetStory', type: 'textarea', subtitle: 'While this section is optional, providing detailed stories or memories can greatly enhance the quality of the speech generated by the AI. The more context you provide, the more personalized and meaningful the speech will be!'},
    { title: `'Share a story about ${formData.marryingWho || 'Jenny'} and yourself that may not have been enjoyable at the time, but now, looking back, brings a smile or laugh'`, field: 'smileStory', type: 'textarea', subtitle: 'While this section is optional, providing detailed stories or memories can greatly enhance the quality of the speech generated by the AI. The more context you provide, the more personalized and meaningful the speech will be!'},
    { title: `How and when did you first meet ${formData.marryingWho || 'Jenny'}? Tell us a story about your relationship early on, and how you see them now`, field: 'relationshipStory', type: 'textarea', subtitle: 'While this section is optional, providing detailed stories or memories can greatly enhance the quality of the speech generated by the AI. The more context you provide, the more personalized and meaningful the speech will be!'},
    { title: `What makes the couples relationship unique? Tell us your favourite story showcasing this, or describe it in words`, field: 'favoriteStory', type: 'textarea', subtitle: 'While this section is optional, providing detailed stories or memories can greatly enhance the quality of the speech generated by the AI. The more context you provide, the more personalized and meaningful the speech will be!'},
    { title: `What are your hopes and dreams for the couple's life together?`, field: 'hopesAndDreams', type: 'textarea', subtitle: 'While this section is optional, providing detailed stories or memories can greatly enhance the quality of the speech generated by the AI. The more context you provide, the more personalized and meaningful the speech will be!'},


    //Stories is just a block of text
    /*
In this part, we'd love for you to share a few stories for the speech. Make sure each story has a beginning, middle, and end.

Providing detailed stories or memories can greatly enhance the quality of the speech generated by the AI. The more context you provide, the more personalized and meaningful the speech will be!

Just remember not to talk about the physical features of the person getting married, stories about old relationships, or any inappropriate tales.
    */

    // { title: `How did you meet ${formData.bride || 'the bride'} or ${formData.groom || 'the groom'}?`, field: 'meetingStory', type: 'textarea' },
    // { title: `What was your first impression of ${formData.bride || 'the bride'} or ${formData.groom || 'the groom'}?`, field: 'firstImpression', type: 'textarea' },
    // { title: `What qualities do you admire most about ${formData.bride || 'the bride'} or ${formData.groom || 'the groom'}?`, field: 'qualities', type: 'textarea' },
    // { title: `Can you share a funny story or moment about ${formData.bride || 'the bride'} or ${formData.groom || 'the groom'}?`, field: 'funnyStory', type: 'textarea' },
    // { title: `Can you share a touching or serious story about ${formData.bride || 'the bride'} or ${formData.groom || 'the groom'}?`, field: 'seriousStory', type: 'textarea' },
    // { title: "What's a favorite memory you share with the couple?", field: 'sharedMemory', type: 'textarea' },
    // { title: "What do you think are the couple's greatest strengths?", field: 'coupleStrengths', type: 'textarea' },
    // { title: `How have you seen ${formData.bride || 'the bride'} or ${formData.groom || 'the groom'} grow since meeting their partner?`, field: 'personalGrowth', type: 'textarea' },
    // { title: "Do you have any advice for the newlyweds?", field: 'adviceForCouple', type: 'textarea' },
    // { title: "What wishes do you have for the couple's future?", field: 'wishes', type: 'textarea' },
    // { title: "How do you envision the couple's life together in 10 years?", field: 'futureVision', type: 'textarea' },
    // { title: `What would you like to say directly to ${formData.bride || 'the bride'}'s or ${formData.groom || 'the groom'}'s partner?`, field: 'messageToPartner', type: 'textarea' },
    // { title: "Is there anything you'd like to express gratitude for?", field: 'gratitude', type: 'textarea' },
    // { title: "Do you have any ideas for a toast or final line to end your speech?", field: 'toastIdea', type: 'textarea' },
    // { title: "Would you like to include a quote in your speech?", field: 'quote', type: 'textarea' },
    // { title: "Any additional thoughts or stories you'd like to include?", field: 'additionalThoughts', type: 'textarea' }
  ]

  const renderQuestion = () => {
    const question = questions[step]
    return (
      <div className="space-y-4">
        <h2 className="text-3xl font-semibold text-[#2F4858] text-center mb-4">{question.title}</h2>
        {question.subtitle && <p className="text-center text-[#5E6E78] mb-8">{question.subtitle}</p>}
        {question.type === 'input' && (
          <Input
            value={formData[question.field]}
            onChange={(e) => updateFormData(question.field, e.target.value)}
            className="border-2 border-[#2F4858] rounded-lg p-3 text-lg w-full"
            placeholder={question.placeholder ? `Enter ${question.placeholder}` : ''}
          />
        )}
        {question.type === 'textarea' && (
          <Textarea
            value={formData[question.field]}
            onChange={(e) => updateFormData(question.field, e.target.value)}
            className="border-2 border-[#2F4858] rounded-lg p-3 text-lg w-full"
            placeholder={`Enter your answer here`}
            rows={5}
          />
        )}
        {question.type === 'radio' && (
          <RadioGroup
            value={formData[question.field]}
            onValueChange={(value) => updateFormData(question.field, value)}
            className="flex flex-col space-y-2"
          >
            {question.options?.map((option: string) => (
              <div key={option} className="flex items-center space-x-2">
                <RadioGroupItem value={option} id={option} className="border-2 border-[#2F4858]" />
                <Label htmlFor={option} className="text-lg">{option}</Label>
              </div>
            ))}
          </RadioGroup>
        )}
      </div>
    )
  }

  const [generatedSpeech, setGeneratedSpeech] = useState<string | null>(null); // New state for generated speech

  const handleSubmit = async () => {
    const prompt = {
      speechType: formData.speechType,
      speechTone: formData.speechTone,
      requestor: formData.requestor,
      spouseName: formData.spouseName,

      firstMetStory: formData.firstMetStory,
      smileStory: formData.smileStory,
      relationshipStory: formData.relationshipStory,
      favoriteStory: formData.favoriteStory,
      hopesAndDreams: formData.hopesAndDreams,
    };

    try {
      const response = await fetch('/api/generate-speech', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate speech');
      }

      const data = await response.json();
      setGeneratedSpeech(data.speech); // Set the generated speech to state
    } catch (error) {
      console.error('Error:', error);
      alert('Error generating speech');
    }
  };

  return (
    <div className="min-h-screen bg-[#F9F5F1] py-12 px-4 sm:px-6 lg:px-8 font-sans">
      <div className="max-w-md mx-auto">
        <Card className="bg-white shadow-lg rounded-lg overflow-hidden">
          <CardContent className="p-8">
            {renderQuestion()}
            <div className="mt-8 flex justify-between">
              {step > 0 && (
                <Button onClick={prevStep} className="bg-[#2F4858] text-white px-6 py-3 rounded-lg text-lg hover:bg-[#1D2D38]">
                  Previous
                </Button>
              )}
              {step === questions.length - 1 ? (
                <Button onClick={handleSubmit} className="bg-[#2F4858] text-white px-6 py-3 rounded-lg text-lg hover:bg-[#1D2D38] ml-auto">
                  Review and Submit
                </Button>
              ) : (
                <Button onClick={nextStep} className="bg-[#2F4858] text-white px-6 py-3 rounded-lg text-lg hover:bg-[#1D2D38] ml-auto">
                  Next
                </Button>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
      <div className="mt-8 flex justify-center">
        <div className="flex space-x-2">
          {questions.map((_, index) => (
            <div
              key={index}
              className={`w-3 h-3 rounded-full ${index <= step ? 'bg-[#2F4858]' : 'bg-[#D1D5DB]'}`}
            />
          ))}
        </div>
      </div>
      {generatedSpeech && ( // Render the generated speech if it exists
        <div className="mt-8 max-w-md mx-auto p-4 bg-white shadow-md rounded-lg">
          <h3 className="text-xl font-semibold text-[#2F4858] mb-2">Generated Speech:</h3>
          <p className="text-lg text-gray-700">{generatedSpeech}</p>
        </div>
      )}
    </div>

  )
}